{"tagline":"Command line interface for performing continuous integration on Jenkins CI with Travis CI like configuration management","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"Jenkins Launcher\r\n================\r\n\r\nOverview:\r\n---------\r\nJenkins launcher makes use of the  'jenkins_api_client' Rubygem which is an API client/wrapper written in pure Ruby and makes use of the Jenkins's JSON API. This project mainly focusses on performing continuous integration tests on a remote Jenkins CI server and all activities are achieved through a command line interface. This projects acts much like building on Travis CI, but makes use of your organization's own Jenkins server where you may have specialized configuration or you don't want to expose your results publicly.\r\n\r\nInstallation:\r\n-------------\r\n\r\n```\r\ngem install jenkins_launcher\r\n```\r\n\r\nGetting Started:\r\n----------------\r\n### Jenkins credentials:\r\nPlease checkout the [README.md](https://github.com/arangamani/jenkins_api_client/blob/master/README.md) of the Jenkins API client project for setting up credentials for easy access.\r\n\r\n### Command line interface:\r\nThis Rubygem installs a command `jlaunch` when this gem gets installed.\r\n\r\nSimply running the command on your terminal will show all available commands and options available.\r\n\r\n```\r\nKannans-MacBook-Pro:~ kannanmanickam$ jlaunch \r\nTasks:\r\n  jlaunch attach CONFIG   # Attach to already running build if any\r\n  jlaunch create CONFIG   # Load configuration and create a job on jenkins\r\n  jlaunch destroy CONFIG  # Destroy the job from Jenkins server\r\n  jlaunch help [TASK]     # Describe available tasks or one specific task\r\n  jlaunch start CONFIG    # Load configuration, create job on jenkins, and build\r\n  jlaunch stop CONFIG     # Stop already running build of the job\r\n  jlaunch version         # Shows current version\r\n\r\nOptions:\r\n  -u, [--username=USERNAME]                # Name of Jenkins user\r\n  -p, [--password=PASSWORD]                # Password of Jenkins user\r\n  -b, [--password-base64=PASSWORD_BASE64]  # Base 64 encoded password of Jenkins user\r\n  -s, [--server-ip=SERVER_IP]              # Jenkins server IP address\r\n  -o, [--server-port=SERVER_PORT]          # Jenkins server port\r\n  -c, [--creds-file=CREDS_FILE]            # Credentials file for communicating with Jenkins server\r\n```\r\n\r\n#### Create command:\r\n\r\nThe `create` command loads the configuration from your configuration file and creates the job on the Jenkins server if it is not already created. Pleas use some unique name for the job. Typing `jlaunch help create` will show the help page for the create command.\r\n\r\n```\r\nKannans-MacBook-Pro:~ kannanmanickam$ jlaunch help create\r\nUsage:\r\n  jlaunch create CONFIG\r\n\r\nOptions:\r\n  -u, [--username=USERNAME]                # Name of Jenkins user\r\n  -p, [--password=PASSWORD]                # Password of Jenkins user\r\n  -b, [--password-base64=PASSWORD_BASE64]  # Base 64 encoded password of Jenkins user\r\n  -s, [--server-ip=SERVER_IP]              # Jenkins server IP address\r\n  -o, [--server-port=SERVER_PORT]          # Jenkins server port\r\n  -c, [--creds-file=CREDS_FILE]            # Credentials file for communicating with Jenkins server\r\n\r\nLoad configuration and create a job on jenkins\r\n```\r\n\r\n#### Start command:\r\n\r\nThe `start` command will create the job if it is not already there and also start a build of the job. Typing `jlaunch help start` will show the help page for this command.\r\n\r\n```\r\nKannans-MacBook-Pro:~ kannanmanickam$ jlaunch help start\r\nUsage:\r\n  jlaunch start CONFIG\r\n\r\nOptions:\r\n  -q, [--quiet-period=QUIET_PERIOD]        # Jenkins Quit period to wait before starting to get console output. Default is '5' seconds\r\n  -r, [--refresh-rate=REFRESH_RATE]        # Time to wait between getting console output from server. Default is '5' seconds\r\n  -d, [--delete-after]                     # Delete the job from Jenkins after the build is finished\r\n  -u, [--username=USERNAME]                # Name of Jenkins user\r\n  -p, [--password=PASSWORD]                # Password of Jenkins user\r\n  -b, [--password-base64=PASSWORD_BASE64]  # Base 64 encoded password of Jenkins user\r\n  -s, [--server-ip=SERVER_IP]              # Jenkins server IP address\r\n  -o, [--server-port=SERVER_PORT]          # Jenkins server port\r\n  -c, [--creds-file=CREDS_FILE]            # Credentials file for communicating with Jenkins server\r\n\r\nLoad configuration, create job on jenkins, and build\r\n```\r\nThe start command accepts three other options:\r\n\r\n1. `--quiet-period`: This is the quiet period of the jenkins server to wait after the build is scheduled. The default is `5` seconds. This command will wait for the specified seconds to get the console output after the build is scheduled.\r\n2. `--refresh-rate`: This is the rate for pinging the Jenkins API to get the console output. The default for this is set to `5` seconds. This is the default in the Jenkins UI as well.\r\n3. `--delete-after`: If this boolean option is specified in the command, the job will be deleted from the Jenkins server after the build is finished. If for some reason the command line is interrupted, the job will not be deleted. The `attach` command should be run to attach to the running job. If the job is already finished and should be deleted, use the `destroy` command separately to delete the job.\r\n\r\n#### Attach command:\r\n\r\nThe `attach` command is used for attaching to an already running build and to watch it's progress. Typing `jlaunch help attach` will show the help page for this command.\r\n\r\n```\r\nKannans-MacBook-Pro:~ kannanmanickam$ jlaunch help attach\r\nUsage:\r\n  jlaunch attach CONFIG\r\n\r\nOptions:\r\n  -r, [--refresh-rate=REFRESH_RATE]        # Time to wait between getting console output from server. Default is '5' seconds\r\n  -d, [--delete-after]                     # Delete the job from Jenkins after the build is finished\r\n  -u, [--username=USERNAME]                # Name of Jenkins user\r\n  -p, [--password=PASSWORD]                # Password of Jenkins user\r\n  -b, [--password-base64=PASSWORD_BASE64]  # Base 64 encoded password of Jenkins user\r\n  -s, [--server-ip=SERVER_IP]              # Jenkins server IP address\r\n  -o, [--server-port=SERVER_PORT]          # Jenkins server port\r\n  -c, [--creds-file=CREDS_FILE]            # Credentials file for communicating with Jenkins server\r\n\r\nAttach to already running build if any\r\n```\r\n\r\nThis command also accepts the `--refresh-rate` and `--delete-after` options. See the `start` command for more details on this option.\r\n\r\n#### Stop command:\r\n\r\nThe `stop` command stops running build of a job. Typing `jlaunch help stop` will show the help page for this command.\r\n\r\n```\r\nKannans-MacBook-Pro:~ kannanmanickam$ jlaunch help stop\r\nUsage:\r\n  jlaunch stop CONFIG\r\n\r\nOptions:\r\n  -u, [--username=USERNAME]                # Name of Jenkins user\r\n  -p, [--password=PASSWORD]                # Password of Jenkins user\r\n  -b, [--password-base64=PASSWORD_BASE64]  # Base 64 encoded password of Jenkins user\r\n  -s, [--server-ip=SERVER_IP]              # Jenkins server IP address\r\n  -o, [--server-port=SERVER_PORT]          # Jenkins server port\r\n  -c, [--creds-file=CREDS_FILE]            # Credentials file for communicating with Jenkins server\r\n\r\nStop already running build of the job\r\n```\r\n\r\n#### Destroy command:\r\n\r\nThe `destroy` command will destroy the job created on the Jenkins server. This is usually used after all tests are ran and the job is not required anymore. Typing `jlaunch help destroy` will bring up the following help page.\r\n\r\n```\r\nKannans-MacBook-Pro:~ kannanmanickam$ jlaunch help destroy\r\nUsage:\r\n  jlaunch destroy CONFIG\r\n\r\nOptions:\r\n  -f, [--force]                            # Stop the job if it is already running\r\n  -u, [--username=USERNAME]                # Name of Jenkins user\r\n  -p, [--password=PASSWORD]                # Password of Jenkins user\r\n  -b, [--password-base64=PASSWORD_BASE64]  # Base 64 encoded password of Jenkins user\r\n  -s, [--server-ip=SERVER_IP]              # Jenkins server IP address\r\n  -o, [--server-port=SERVER_PORT]          # Jenkins server port\r\n  -c, [--creds-file=CREDS_FILE]            # Credentials file for communicating with Jenkins server\r\n\r\nDestroy the job from Jenkins server\r\n```\r\n\r\nThis command accepts a boolean option `--force` which forces the destroy command to stop any running build. If this option is not specified the command will exit without destroying the job or the `stop` command can be called separately to stop the build before calling this command.\r\n\r\n### Structure of the configuration YAML file:\r\n\r\nThe structure of the configuration file looks like this.\r\n\r\n```\r\nname: test_build_kannan\r\ngit: git://github.com/arangamani/jenkins_api_client.git\r\nref: master\r\nscript:\r\n - echo \"first echo\"\r\n - sleep 10\r\n - echo \"second echo\"\r\n - sleep 5\r\n```\r\n\r\n#### Configuration options:\r\n* name: Name is a required parameter and used for creating job on the Jenkins server.\r\n* git: Git URL for checking out the project from. This requires that you need Git plugin installed on your Jenkins. If not, the job will be created without this source control.\r\n* svn: Subversion URL. If this option is specified, the Subversion URL will be used to checkout the project. Subversion is installed in Jenkins by default.\r\n* ref: This specifies the `branch` to checkout for Git source control system.\r\n* script: Shell command is the command executed on the server. Multiple lines of command can be given just like shown in the example.\r\n\r\nAuthor:\r\n-------\r\nKannan Manickam <arangamani.kannan@gmail.com>\r\n\r\nCONTRIBUTING:\r\n-------------\r\n\r\nIf you would like to contribute to this project, just do the following:\r\n\r\n1. Fork the repo on Github.\r\n2. Add your features and make commits to your forked repo.\r\n3. Make a pull request to this repo.\r\n4. Review will be done and changes will be requested.\r\n5. Once changes are done or no changes are required, pull request will be merged.\r\n6. The next release will have your changes in it.\r\n\r\nLICENCE:\r\n--------\r\n\r\nCopyright (c) 2013 Kannan Manickam <arangamani.kannan@gmail.com>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.","name":"Jenkins Launcher","google":""}